# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_CxRJuDPDtQtqj29HFZHQVd6T4TnhU0H
"""

import pandas as pd
from natsort import natsorted
import streamlit as st

# Load the CSV files from local data directory
@st.cache_data
def load_data():
    elective_df = pd.read_csv('data/elective_sheet1.csv')
    core_df = pd.read_csv('data/core_section_sheet1.csv')

    # Rename columns for better clarity
    elective_df.columns = elective_df.iloc[0]
    elective_df = elective_df[1:]

    core_df.columns = core_df.iloc[0]
    core_df = core_df[1:]

    # Merge the dataframes on 'Roll No.'
    merged_df = pd.merge(elective_df, core_df, on='Roll No.', how='outer')

    return merged_df

# Function to filter and process the dataframe
def filter_and_process_data(merged_df):
    # Split the elective sections into two columns
    merged_df['Professional Elective 1'] = merged_df.groupby('Roll No.')['Elective section'].transform(lambda x: x.iloc[0])
    merged_df['Professional Elective 2'] = merged_df.groupby('Roll No.')['Elective section'].transform(lambda x: x.iloc[1] if len(x) > 1 else None)

    # Drop duplicates and unnecessary columns
    merged_df = merged_df[['Roll No.', 'Professional Elective 1', 'Professional Elective 2', 'Core Section']].drop_duplicates()

    # Function to rearrange elective sections
    def rearrange_electives(row):
        if row['Professional Elective 1'] and row['Professional Elective 1'].startswith(('HPC', 'DOS')):
            row['Professional Elective 1'], row['Professional Elective 2'] = row['Professional Elective 2'], row['Professional Elective 1']
        return row

    # Apply the function to each row in the dataframe
    merged_df = merged_df.apply(rearrange_electives, axis=1)

    # Sort the dataframe by 'Roll No.' and return
    return merged_df.sort_values(by='Roll No.').reset_index(drop=True)

# Function to get details for a specific section
def get_details_by_section(processed_df, section, section_type='core'):
    if section_type == 'core':
        result_df = processed_df[processed_df['Core Section'] == section]
    else:
        result_df = processed_df[(processed_df['Professional Elective 1'] == section) | (processed_df['Professional Elective 2'] == section)]
    return result_df[['Roll No.', 'Core Section', 'Professional Elective 1', 'Professional Elective 2']]

# Function to get details of a specific roll number
def get_details_by_roll_number(processed_df, roll_number):
    result_df = processed_df[processed_df['Roll No.'].astype(int) == roll_number]
    return result_df[['Roll No.', 'Core Section', 'Professional Elective 1', 'Professional Elective 2']]

# Main function
def main():
    # Load and process data
    merged_df = load_data()
    processed_df = filter_and_process_data(merged_df)

    # Get unique section lists and sort them naturally
    core_sections = natsorted(processed_df['Core Section'].dropna().unique())
    prof_elective_1_sections = natsorted(processed_df['Professional Elective 1'].dropna().unique())
    prof_elective_2_sections = natsorted(processed_df['Professional Elective 2'].dropna().unique())

    # Streamlit UI
    st.sidebar.title("Student Information System")
    st.sidebar.markdown("### Navigate through the options to explore student information")

    query_section = st.sidebar.radio("Do you want to know the roll list of any particular section?", ('Yes', 'No'))

    st.title("Student Information System Dashboard")
    st.markdown("""
        <style>
        .main {
            background-color: #f5f5f5;
        }
        </style>
        """, unsafe_allow_html=True)

    if query_section == 'Yes':
        section_type = st.sidebar.radio("Select the type of section:", ('Core Section', 'Professional Elective'))

        if section_type == 'Core Section':
            section_name = st.sidebar.selectbox("Select a core section:", core_sections)
        else:
            elective_type = st.sidebar.radio("Select the type of professional elective:", ('Professional Elective 1', 'Professional Elective 2'))
            if elective_type == 'Professional Elective 1':
                section_name = st.sidebar.selectbox("Select a professional elective 1 section:", prof_elective_1_sections)
            else:
                section_name = st.sidebar.selectbox("Select a professional elective 2 section:", prof_elective_2_sections)
            section_type = elective_type

        section_result_df = get_details_by_section(processed_df